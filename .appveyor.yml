# AU template: https://github.com/majkinetor/au-packages-template

version: '{build}'
pull_requests:
  do_not_increment_build_number: true
max_jobs: 1
image: WMF 5
# History plugin requires complete log
#clone_depth: 5
branches:
  only:
  - master
  - appveyor
#build:
#  verbosity: minimal

environment:
  # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
  au_version: master
  au_push: true
  # Use 1 to test all, or N to split testing into N groups
  au_test_groups: 1

  # Github token to commit pushed packages to repository
  github_user_repo: KageShiron/chocolatey-packages
  github_api_key:
    secure: MQHJMOQhM1Vl3aAhdadYX2PyTChRqHt35dSkfOL+XeF+jlbkIaPbylHHBf7Gqly0
    #secure: EpBcCRasqCDEoP0aCzT0c/Q2gRUAtuAP6O4Diqw0Oia73ZEzgkQkMBIjJkju837D

  # Mail credentials - for error notifications
  # mail_user: gep13choco@gmail.com
  # mail_pass:
  #   secure: JuJVdA2yg59By5czxxm9ZwTsvsNK+WcgCs+jVQdHz+8=
  # mail_server: smtp.gmail.com
  # mail_port: 587
  # mail_enablessl: true

  #ID of the gist used to save run results
  gist_id: e7a862a33142f54a2250b657ac2182f6

  #ID of the gist used to save test run results
  gist_id_test: 3930cc98af6951bf37d90f7d8e08dadd

  #Chocolatey API key - to push updated packages
  api_key:
    secure: 4cS9/SM7j4yy7yJ7dpsPnbMVScTCvqAqAPjREbf78fer1gVQAwh1QbydIyp00VIr # https://ci.appveyor.com/tools/encrypt
    
  #Chocolatey version we want to use when checking for updates.
  choco_version: '0.10.8'
  choco_version_pr: '0.10.3' # Should be kept to the version available one year ago
  nupkg_cache_path: C:\packages

init:
- git config --global user.email "chocolatey@realdimensions.net"
- git config --global user.name "Chocolatey"
- git config --global core.safecrlf false

install:
- ps: |
    $chocoVersion = if (($Env.APPVEYOR_PULL_REQUEST_NUMBER -eq $null) -or ($ENV:APPVEYOR_PULL_REQUEST_NUMBER -eq '')) { $Env:choco_version } else { $Env:choco_version_pr }
    if (!(Test-Path "$env:nupkg_cache_path")) { mkdir -Force "$env:nupkg_cache_path" }
    if (!(Test-Path "${env:nupkg_cache_path}\chocolatey.${chocoVersion}.nupkg")) { iwr "https://chocolatey.org/api/v2/package/chocolatey/${chocoVersion}" -OutFile   "${env:nupkg_cache_path}\chocolatey.${chocoVersion}.nupkg" }
    cup chocolatey --source ${env:nupkg_cache_path} --version $chocoVersion
    if (!(Test-path "${env:nupkg_cache_path}\wormies-au-helpers.0.2.0.nupkg")) { iwr "https://chocolatey.org/api/v2/package/wormies-au-helpers/0.2.0" -OutFile "${env:nupkg_cache_path}\wormies-au-helpers.0.2.0.nupkg" }
    cinst wormies-au-helpers --source ${env:nupkg_cache_path} --version 0.2.0 --ignore-dependencies
- ps: 'Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version'
- ps: $PSVersionTable
- git --version
- choco --version
- ps: |
    git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
    . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version
- ps: |
    "Build info"
    '  {0,-20} {1}' -f 'SCHEDULED BUILD:', ($Env:APPVEYOR_SCHEDULED_BUILD -eq 'true')
    '  {0,-20} {1}' -f 'FORCED BUILD:'   , ($Env:APPVEYOR_FORCED_BUILD    -eq 'true')
    '  {0,-20} {1}' -f 'RE BUILD:'       , ($Env:APPVEYOR_RE_BUILD        -eq 'true')
build_script:
- ps: |
    $ErrorActionPreference = 'Continue'

    . ./scripts/EventLogs.ps1
    Clear-EventLogs

    if ($Env:APPVEYOR_PROJECT_NAME  -like '*test*') { ./test_all.ps1 "random $Env:au_test_groups"; return }
    if (($Env:APPVEYOR_PULL_REQUEST_NUMBER -ne $null) -and ($Env:APPVEYOR_PULL_REQUEST_NUMBER -ne '')) {
      Set-Service wuauserv -StartupType Manual
      ./scripts/Test-RepoPackage.ps1 -CleanFiles
      return
    } else {
      # Clean the choco logs as it's quite large
      rm "$env:ChocolateyInstall\logs\*.log"
    }
    if ( ($Env:APPVEYOR_SCHEDULED_BUILD -ne 'true') -and ($Env:APPVEYOR_FORCED_BUILD -ne 'true') ) {
        switch -regex ($Env:APPVEYOR_REPO_COMMIT_MESSAGE)
        {
            '\[AU (.+?)\]'   { $forced = $Matches[1] }
            '\[PUSH (.+?)\]' {
                $packages = $Matches[1] -split ' '
                Write-Host "PUSHING PACKAGES: $packages"
                foreach ($package in $packages) {
                    Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                    $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory

                    if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                    pushd $package_dir
                      if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                      choco pack; Push-Package -All;
                    popd
                }
                return
            }
        }
    }

    ./update_all.ps1 -ForcedPackages $forced
    Get-EventLogs * | ? Source -eq 'Schannel' | fl * |  out-file eventlogs.txt
on_finish:
- ps: |
    if (Test-Path $Env:TEMP\chocolatey\au) { 7z a  -mx9 au_temp.7z $Env:TEMP\chocolatey\au\* }
    $paths = @(
      Resolve-Path "$env:TEMP\artifacts\*" -ea 0
      'au_temp.7z'
      'update_info.xml'
      'Update-AUPackages.md'
      'eventlogs.txt'
    )
    $paths | ? { Test-Path $_ } | % { Push-AppveyorArtifact $_ }
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

notifications:
- provider: Email
  to: $(mail_user)
  on_build_success: false
  on_build_failure: true
  on_build_status_changed: true

cache:
  - '%nupkg_cache_path% -> .appveyor.yml'
